package main.controller;

import java.security.acl.Owner;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import main.MainApp;
import model.people.Person;
import model.places.Grave;
import remote.HibFacadeBeanRemote;

public class NewPersonDialogController {
	@FXML
	private Label firstNameLabel;
	@FXML
	private Label lastNameLabel;
	@FXML
	private Label cityLabel;
	@FXML
	private Label streetLabel;
	@FXML
	private Label postalCodeLabel;
	@FXML
	private Label phoneNumberLabel;
	@FXML
	private Label emailLabel;
	@FXML
	private Label titleLabel;
	@FXML
	private TextField firstNameTextField;
	@FXML
	private TextField lastNameTextField;
	@FXML
	private TextField cityTextField;
	@FXML
	private TextField streetTextField;
	@FXML
	private TextField postalCodeTextField;
	@FXML
	private TextField phoneNumberTextField;
	@FXML
	private TextField emailTextField;
	@FXML
	private Button cancelButton;
	@FXML
	private Button okButton;
	@FXML
	private GridPane gridPane;
	
	private MainApp mainApp;
	private Stage dialogStage;
	private Person person;
	private boolean personClass;
	private boolean okClicked = false;
	
	public NewPersonDialogController(MainApp mainApp){
		setMainApp(mainApp);
	}
	
	@FXML
	private void initialize(){
		resetText();
	}
	
	public void resetText(){
		ResourceBundle resourceBundle = mainApp.getResourceBundle();
		firstNameLabel.setText(resourceBundle.getString("firstNameLabel"));
		lastNameLabel.setText(resourceBundle.getString("lastNameLabel"));
		cityLabel.setText(resourceBundle.getString("cityLabel"));
		streetLabel.setText(resourceBundle.getString("streetLabel"));
		postalCodeLabel.setText(resourceBundle.getString("postalCodeLabel"));
		phoneNumberLabel.setText(resourceBundle.getString("phoneNumberLabel"));
		emailLabel.setText(resourceBundle.getString("emailLabel"));
		okButton.setText(resourceBundle.getString("okButton"));
		cancelButton.setText(resourceBundle.getString("cancelButton"));
		
		if (personClass){
			titleLabel.setText(resourceBundle.getString("newPersonButtonGrave"));
		} else{
			titleLabel.setText(resourceBundle.getString("newPersonButtonSector"));
		}
		if (person!=null){
			firstNameTextField.setText(person.getFirstName());
			lastNameTextField.setText(person.getLastName());
			cityTextField.setText(person.getCity());
			streetTextField.setText(person.getStreet());
			postalCodeTextField.setText(person.getPostalCode());
			phoneNumberTextField.setText(person.getPhoneNumber());
			emailTextField.setText(person.getEmail());
		}
	}
	
	@FXML
	private void handleOkButton(){
		if (isInputValid()){
			if((firstNameTextField.getText()!=person.getFirstName())
					||(lastNameTextField.getText()!=person.getLastName())
					||(cityTextField.getText()!=person.getCity())
					||(streetTextField.getText()!=person.getStreet())
					||(postalCodeTextField.getText()!=person.getPostalCode())
					||(phoneNumberTextField.getText()!=person.getPhoneNumber())
					||(emailTextField.getText()!=person.getEmail())){
			}
			setOkClicked(true);
			dialogStage.close();
			return;	
		}
	}
	
	@FXML
	private void handleCancelButton(){
		dialogStage.close();
	}
	
	public boolean isInputValid(){
		boolean temp=true;
		TextField tempTextField;
		ObservableList<Object> column = FXCollections.observableArrayList();
		column.addAll(gridPane.getChildren());
	
		for (Object object : column) {
			if (object.getClass().equals(TextField.class)){
				tempTextField = (TextField) object;
				if (tempTextField.getText().isEmpty()){
					temp=false;
					tempTextField.setStyle("-fx-border-color: FF3333;-fx-border-width: 2");
					
				} else{
					tempTextField.setStyle("");
				}
			}
		}
		if (!temp){
			Alert alert = new Alert(AlertType.ERROR);
            alert.initOwner(mainApp.getPrimaryStage());
            alert.setTitle("Invalid Fields");
            alert.setHeaderText("Please fill out all red fields.");
            alert.setContentText(null);
            alert.showAndWait();
		}
		return temp;
	}

	public MainApp getMainApp() {
		return mainApp;
	}

	public void setMainApp(MainApp mainApp) {
		this.mainApp = mainApp;
	}
	
	public Stage getDialogStage() {
		return dialogStage;
	}

	public void setDialogStage(Stage dialogStage) {
		this.dialogStage = dialogStage;
	}

	public boolean isOkClicked() {
		return okClicked;
	}

	public void setOkClicked(boolean okClicked) {
		this.okClicked = okClicked;
	}

	public boolean isPersonClass() {
		return personClass;
	}

	public void setPersonClass(boolean graveClass) {
		this.personClass = graveClass;
	}

	public Person getPerson() {
		return person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}
}
