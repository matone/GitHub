package executive;

import java.util.ArrayList;
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceException;

import dao.FuneralDAO;
import dao.GraveDAO;
import dao.ManagementDAO;
import dao.RentDAO;
import dao.SectorDAO;
import model.Funeral;
import model.Management;
import model.Rent;
import model.places.Grave;
import model.places.Sector;

@Stateless
public class HibExecutiveBean {
	
	public Grave getGraveById(EntityManager em, int id){
		
		GraveDAO gDao = new GraveDAO();
		
		Grave grave = gDao.getGraveById(em, id);
		
		List<Funeral> funerals = new ArrayList<Funeral>();
		List<Rent> rents = new ArrayList<Rent>();
			
		for (Rent curRent : grave.getRents()) {
			em.detach(curRent.getOwner());
			em.detach(curRent);
			curRent.getOwner().setRents(null);
			rents.add(curRent);
		}
		
		for (Funeral curFuneral : grave.getFunerals()) {
			em.detach(curFuneral.getDeceased());
			em.detach(curFuneral);
			curFuneral.getDeceased().setExhumations(null);
			curFuneral.getDeceased().setFunerals(null);
			curFuneral.setApplicant(null);
			funerals.add(curFuneral);
		}
		
		em.detach(grave.getSector());
		grave.getSector().setManagements(null);
		grave.getSector().setGraves(null);
		
		em.detach(grave);
		grave.setRents(rents);
		grave.setFunerals(funerals);
		
		return grave;
	}
	
	public Sector getSectorById(EntityManager em, int id){
		SectorDAO sDao = new SectorDAO();
		
		Sector sector = sDao.getSectorById(em, id);
		
		List<Management> managements = new ArrayList<Management>();
		
		for (Management curManagement : sector.getManagements()) {
			em.detach(curManagement.getManager());
			em.detach(curManagement);
			curManagement.getManager().setManagements(null);
			managements.add(curManagement);
		}		
		
		em.detach(sector);
		sector.setGraves(null);
		sector.setManagements(managements);
		
		return sector;		
	}
	
	public List<Sector> getSectorTree(EntityManager em){
		
		SectorDAO sDao = new SectorDAO();
		
		List<Sector> sectors = sDao.getScheme(em);
		
		
		for (Sector curSector : sectors) {
			List<Grave> graves = new ArrayList<Grave>();
			
			for (Grave curGrave : curSector.getGraves()) {
				curGrave.setRents(null);
				em.detach(curGrave);
				graves.add(curGrave);
			}
			curSector.setManagements(null);
			curSector.setGraves(graves);
			em.detach(curSector);
		}
		
		return sectors;
	}

	public List<Rent> getRentsByGraveOwner(EntityManager em, int graveId, int ownerId){

		RentDAO rDao = new RentDAO();
		
		List<Rent> rents = rDao.getRentsByGraveOwner(em, graveId, ownerId);
		
		for (Rent curRent : rents) {
			em.detach(curRent);
			curRent.setGrave(null);
			curRent.setOwner(null);
		}
		
		return rents;
	}
	

	public List<Funeral> getFuneralsByGraveDeceased(EntityManager em, int graveId, int deceasedId){
		FuneralDAO fDao = new FuneralDAO();
		
		List<Funeral> funerals = fDao.getFuneralsByGraveDeceased(em, graveId, deceasedId);
		
		for (Funeral curFuneral : funerals) {
			em.detach(curFuneral);
			curFuneral.setGrave(null);
			curFuneral.setApplicant(null);
			curFuneral.setDeceased(null);
		}
		
		return funerals;
	}

	public List<Management> getManagementsBySectorManager(EntityManager em, int graveId, int deceasedId){
		ManagementDAO mDao = new ManagementDAO();
		
		List<Management> managements = mDao.getManagementsBySectorManager(em, graveId, deceasedId);
		
		for (Management curManagement : managements) {
			em.detach(curManagement);
			curManagement.setSector(null);
			curManagement.setManager(null);
		}
		
		return managements;
	}

	public int insertSector(EntityManager em, Sector sector){
		
		em.persist(sector);
		
		return sector.getId();
	}

	public Boolean createGrave(EntityManager em, Grave grave, Sector sector) {
		Sector sectorDB = em.find(Sector.class, sector.getId());
		
		grave.setSector(sectorDB);
		
		sectorDB.setFullGravesNumber(sectorDB.getFullGravesNumber()+1);
		
		
		em.persist(grave);
		
		return true;
	}
}

