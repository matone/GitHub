package main.controller;

import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.GridPane;
import main.MainApp;
import main.model.Exhumation;
import main.model.people.Applicant;
import main.model.people.Deceased;
import main.model.people.Owner;
import main.util.ElasticSearchUtil;
import main.util.HibernateUtil;

public class ExhumationRegistrationController {
	
	@FXML
	private TabPane exhumationTabPane;
	@FXML
	private Label exhumationRegistrationLabel;
	@FXML
	private Tab applicantTab;
	@FXML
	private Tab exhumationTab;
	@FXML
	private Tab deceasedTab;
	@FXML
	private Label firstNameLabel;
	@FXML
	private Label lastNameLabel;
	@FXML
	private Label cityLabel;
	@FXML
	private Label streetLabel;
	@FXML
	private Label postalCodeLabel;
	@FXML
	private Label phoneNumberLabel;
	@FXML
	private Label emailLabel;
	@FXML
	private Label ownerFirstNameLabel;
	@FXML
	private Label ownerLastNameLabel;
	@FXML
	private Label ownerCityLabel;
	@FXML
	private Label ownerStreetLabel;
	@FXML
	private Label ownerPostalCodeLabel;
	@FXML
	private Label ownerPhoneNumberLabel;
	@FXML
	private Label ownerEmailLabel;
	@FXML
	private Label decFirstNameLabel;
	@FXML
	private Label decLastNameLabel;
	@FXML
	private Label graveNumberLabel;
	@FXML
	private Label ageLabel;
	@FXML
	private Label ownerFirstName;
	@FXML
	private Label ownerLastName;
	@FXML
	private Label ownerCity;
	@FXML
	private Label ownerStreet;
	@FXML
	private Label ownerPostalCode;
	@FXML
	private Label ownerPhoneNumber;
	@FXML
	private Label ownerEmail;
	@FXML
	private Label authorizationLabel;
	@FXML
	private Label exhumationDateLabel;
	@FXML
	private Label sectorNumberLabel;
	@FXML
	private Label graveLabel;
	@FXML
	private Label exhumationTimeLabel;
	@FXML
	private ComboBox<String> firstNameTextField;
	@FXML
	private ComboBox<String> lastNameTextField;
	@FXML
	private TextField cityTextField;
	@FXML
	private TextField streetTextField;
	@FXML
	private TextField postalCodeTextField;
	@FXML
	private TextField phoneNumberTextField;
	@FXML
	private TextField emailTextField;
	@FXML
	private ComboBox<String> decFirstNameTextField;
	@FXML
	private ComboBox<String> decLastNameTextField;
	@FXML
	private TextField graveNumberTextField;
	@FXML
	private TextField sectorNumberTextField;
	@FXML
	private TextField daysTextField;
	@FXML
	private TextField monthsTextField;
	@FXML
	private TextField yearsTextField;
	@FXML
	private TextField ageTextField;
	@FXML
	private Button backButton;
	@FXML
	private Button nextButton;
	@FXML
	private Button cancelButton;
	@FXML
	private Button okButton;
	@FXML
	private Button secondNextButton;
	@FXML
	private Button secondBackButton;
	@FXML
	private CheckBox authorizationCheckBox;
	@FXML
	private GridPane applicantGridPane;
	@FXML
	private GridPane deceasedGridPane;
	@FXML
	private GridPane exhumationGridPane;
	@FXML
	private ComboBox<String> timeBox;
	@FXML
	private ComboBox<String> cb;
	
	
	private MainApp mainApp;
	private boolean initialized = false;
	
	private Applicant applicant = null;
	private boolean newApplicant = false;
	private Deceased deceased = null;
	private Owner owner = null;
	private int years;
	private int months;
	private int days;
	private int hours;
	private int sectorNumber;
	private int graveNumber;
	
	public ExhumationRegistrationController(MainApp mainApp) {
		setMainApp(mainApp);
	}
	
	@FXML
	private void initialize(){
		timeBox.getItems().addAll("08:00","09:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00");
		resetText();
		setInitialized(true);
		exhumationTab.setDisable(true);
		applicantTab.setDisable(false);
		deceasedTab.setDisable(true);
		firstNameTextField.setEditable(true);
		lastNameTextField.setEditable(true);
		decFirstNameTextField.setEditable(true);
		decLastNameTextField.setEditable(true);
	}
	
	@FXML
	private void handleKeyPressedFirstName(){
		firstNameTextField.setItems(ElasticSearchUtil.searchFirstName(firstNameTextField.getEditor().getText(), "applicant"));
		firstNameTextField.show();
	}
	
	@FXML
	private void handleKeyPressedLastName(){
		lastNameTextField.setItems(ElasticSearchUtil.searchLastName(lastNameTextField.getEditor().getText(), "applicant"));
		lastNameTextField.show();
	}
	
	@FXML
	private void handleKeyPressedDecFirstName(){
		decFirstNameTextField.setItems(ElasticSearchUtil.searchFirstName(decFirstNameTextField.getEditor().getText(), "deceased"));
		decFirstNameTextField.show();
	}
	
	@FXML
	private void handleKeyPressedDecLastName(){
		decLastNameTextField.setItems(ElasticSearchUtil.searchLastName(decLastNameTextField.getEditor().getText(), "deceased"));
		decLastNameTextField.show();
	}

	public void resetText(){
		ResourceBundle resourceBundle = mainApp.getResourceBundle();
		exhumationRegistrationLabel.setText(resourceBundle.getString("exhumationRegistrationLabel"));
		applicantTab.setText(resourceBundle.getString("applicantTab"));
		exhumationTab.setText(resourceBundle.getString("exhumationTab"));
		deceasedTab.setText(resourceBundle.getString("deceasedTab"));
		firstNameLabel.setText(resourceBundle.getString("firstNameLabel"));
		lastNameLabel.setText(resourceBundle.getString("lastNameLabel"));
		cityLabel.setText(resourceBundle.getString("cityLabel"));
		streetLabel.setText(resourceBundle.getString("streetLabel"));
		postalCodeLabel.setText(resourceBundle.getString("postalCodeLabel"));
		phoneNumberLabel.setText(resourceBundle.getString("phoneNumberLabel"));
		emailLabel.setText(resourceBundle.getString("emailLabel"));
		ownerFirstNameLabel.setText(resourceBundle.getString("firstNameLabel"));
		ownerLastNameLabel.setText(resourceBundle.getString("lastNameLabel"));
		ownerCityLabel.setText(resourceBundle.getString("cityLabel"));
		ownerStreetLabel.setText(resourceBundle.getString("streetLabel"));
		ownerPostalCodeLabel.setText(resourceBundle.getString("postalCodeLabel"));
		ownerPhoneNumberLabel.setText(resourceBundle.getString("phoneNumberLabel"));
		ownerEmailLabel.setText(resourceBundle.getString("emailLabel"));
		decFirstNameLabel.setText(resourceBundle.getString("firstNameLabel"));
		decLastNameLabel.setText(resourceBundle.getString("lastNameLabel"));
		graveNumberLabel.setText(resourceBundle.getString("graveNumberLabel"));
		ageLabel.setText(resourceBundle.getString("age"));
		exhumationDateLabel.setText(resourceBundle.getString("exhumationDateLabel"));
		backButton.setText(resourceBundle.getString("backButton"));
		nextButton.setText(resourceBundle.getString("nextButton"));
		cancelButton.setText(resourceBundle.getString("cancelButton"));
		secondBackButton.setText(resourceBundle.getString("backButton"));
		secondNextButton.setText(resourceBundle.getString("nextButton"));
		okButton.setText(resourceBundle.getString("okButton"));
		authorizationLabel.setText(resourceBundle.getString("authorizationLabel"));
		sectorNumberLabel.setText(resourceBundle.getString("sectorNumberLabel"));
		graveLabel.setText(resourceBundle.getString("graveLabel"));
		exhumationTimeLabel.setText(resourceBundle.getString("time"));
	}
	
	@FXML
	private void handleNextButton(){
		if ((isInputValid(applicantGridPane)) && (applicant == null)){
			Session session = sf.openSession();
			applicant = (Applicant) session.createSQLQuery("SELECT * FROM applicant a "+ 
								"WHERE a.first_name = '"+ firstNameTextField.getEditor().getText()+
								"' AND a.last_name = '"+ lastNameTextField.getEditor().getText()+ 
								"' AND a.city = '" + cityTextField.getText()+ 
								"' AND a.street = '" + streetTextField.getText()+ 
								"' AND a.postal_code = '"+ postalCodeTextField.getText()+ 
								"' AND a.email = '" + emailTextField.getText()+ 
								"' AND a.phone_number = '" + phoneNumberTextField.getText()+"'").addEntity(Applicant.class).uniqueResult();
			session.close();
			if (applicant == null) {
				applicant = new Applicant();
				newApplicant = true;
				applicant.setFirstName(firstNameTextField.getEditor().getText());
				applicant.setLastName(lastNameTextField.getEditor().getText());
				applicant.setCity(cityTextField.getText());
				applicant.setStreet(streetTextField.getText());
				applicant.setPostalCode(postalCodeTextField.getText());
				applicant.setPhoneNumber(phoneNumberTextField.getText());
			}
		}
		if  (applicant!=null){			
			exhumationTabPane.getSelectionModel().select(1);
			applicantTab.setDisable(true);
			deceasedTab.setDisable(false);
			exhumationTab.setDisable(true);
		}
	}
	
	@FXML
	private void handleSecondNextButton(){
		if ((isInputValid(deceasedGridPane)) && (deceased==null)) {
			graveNumber = Integer.parseInt(graveNumberTextField.getText());
			sectorNumber = Integer.parseInt(sectorNumberTextField.getText());
			
			Session session = sf.openSession();
			Transaction t = session.beginTransaction();
			
			deceased = (Deceased) session.createSQLQuery("SELECT d.id, d.first_name, d.last_name, d.age FROM deceased d " +
					"JOIN funeral f ON d.id = f.deceased_id " + 
					"JOIN grave g ON f.grave_id = g.id " +
					"JOIN sector s ON g.sector_id = s.id " +
					"WHERE d.first_name = '" + decFirstNameTextField.getEditor().getText() +
					"' AND d.last_name = '" + decLastNameTextField.getEditor().getText() +
					"' AND d.age = " + Integer.parseInt(ageTextField.getText()) +
					" AND g.grave_number = " + graveNumber +
					" AND s.sector_number = " + sectorNumber).addEntity(Deceased.class).uniqueResult();
			if (deceased == null){
				Alert alert = new Alert(AlertType.ERROR);
				alert.initOwner(mainApp.getPrimaryStage());
				alert.setTitle("Invalid Informations");
				alert.setHeaderText("Deceased Was Not Fount.");
				alert.setContentText(null);
				alert.showAndWait();
			} else{
				owner = (Owner) session.createSQLQuery("SELECT o.id, o.first_name, o.last_name, o.city, o.street, o.postal_code, o.email, o.phone_number FROM owner o " +
								"JOIN rent r ON o.id = r.owner_id " +
								"JOIN grave g ON r.grave_id = g.id " +
								"JOIN sector s ON g.sector_id = s.id " +
								"WHERE s.sector_number = " + sectorNumber +
								" AND g.grave_number = " + graveNumber+
								" AND r.date_to IS NULL").addEntity(Owner.class).uniqueResult();
				
				ownerFirstName.setText(owner.getFirstName());
				ownerLastName.setText(owner.getLastName());
				ownerCity.setText(owner.getCity());
				ownerStreet.setText(owner.getStreet());
				ownerPostalCode.setText(owner.getPostalCode());
				ownerPhoneNumber.setText(owner.getPhoneNumber());
				ownerEmail.setText(owner.getEmail());
			}
		t.commit();
		session.close();
		}
		if  (deceased!=null){
			exhumationTabPane.getSelectionModel().select(2);
			applicantTab.setDisable(true);
			deceasedTab.setDisable(true);
			exhumationTab.setDisable(false);	
		}
	}
	
	@FXML
	private void handleBackButton(){
		exhumationTabPane.getSelectionModel().select(0);
		exhumationTab.setDisable(true);
		applicantTab.setDisable(false);
		deceasedTab.setDisable(true);
	}
	
	@FXML
	private void handleSecondBackButton(){
		exhumationTabPane.getSelectionModel().select(1);
		applicantTab.setDisable(true);
		deceasedTab.setDisable(false);
		exhumationTab.setDisable(true);
	}
	
	@FXML
	private void handleOkButton(){
		String message;
		Session session = sf.openSession();
		Transaction t = session.beginTransaction();
		if (!isDateValid()){
			t.commit();
			session.close();
			return;
		} else if (!authorizationCheckBox.isSelected()){
			message = "The Exhumation has to be Allowed by Owner";
		} else{
			Exhumation exhumation = new Exhumation();
			if (newApplicant){
				session.persist(applicant);
				ElasticSearchUtil.createIndex("applicant",applicant.getFirstName(), applicant.getLastName(), Integer.toString(applicant.getId()));
			}
			
			exhumation.setDeceased(deceased);
			exhumation.setApplicant(applicant);
			exhumation.setIntDateFrom(years, months, days, hours, 0);
			session.persist(exhumation);
			
			session.createSQLQuery("UPDATE grave SET full_places_number = full_places_number-"+1+"WHERE id = "+graveNumber).executeUpdate();
			session.createSQLQuery("UPDATE funeral SET date_to = '" + exhumation.getDateFrom().getTime() + "' WHERE deceased_id = " + deceased.getId() + " AND date_to IS NULL").executeUpdate();
			t.commit();
			session.close();
			Alert alert = new Alert(AlertType.INFORMATION);
			alert.initOwner(mainApp.getPrimaryStage());
			alert.setTitle("New exhumation");
			alert.setHeaderText("New exhumation was successfully created.");
			alert.showAndWait();
			
			return;
		}
		Alert alert = new Alert(AlertType.ERROR);
		alert.initOwner(mainApp.getPrimaryStage());
		alert.setTitle("Invalid fields");
		alert.setHeaderText(message);
		alert.setContentText(null);
		alert.showAndWait();
		t.commit();
		session.close();
	}
	
	public boolean isDateValid() throws NumberFormatException{
		String temp="Date values must be numerical";
		try {
			years = Integer.parseInt(yearsTextField.getText());
			months = Integer.parseInt(monthsTextField.getText());
			days = Integer.parseInt(daysTextField.getText());
			hours = timeBox.getSelectionModel().getSelectedIndex() + 8;
			temp="Please enter the date in dd/mm/yyyy format";
		} catch (NumberFormatException e) {
			e.printStackTrace();
		}
		
		if ((days<=31)&&(months<=12)&&(days>0)&&(months>0)){
			return true;
		}
		Alert alert = new Alert(AlertType.ERROR);
		alert.initOwner(mainApp.getPrimaryStage());
		alert.setTitle("Invalid Date Format");
		alert.setHeaderText(temp);
		alert.setContentText(null);
		alert.showAndWait();
		return false;
	}

	@FXML
	private void handleCancelButton(){
		mainApp.showExhumationRegistrationPane();
	}
	
	@FXML
	private void handleRadioButton(){

	}
	
	public boolean isInputValid(GridPane gridPane){
		boolean temp=true;
		TextField tempTextField;
		ObservableList<Object> column = FXCollections.observableArrayList();
		column.addAll(gridPane.getChildren());
		for (Object object : column) {
			if (object.getClass().equals(TextField.class)){
				tempTextField = (TextField) object;
				if (tempTextField.getText().isEmpty()){
					temp=false;
					tempTextField.setStyle("-fx-border-color: FF3333;-fx-border-width: 2");
					
				} else{
					tempTextField.setStyle("");
				}
			}
		}
		if (!temp){
			Alert alert = new Alert(AlertType.ERROR);
			alert.initOwner(mainApp.getPrimaryStage());
            alert.initOwner(mainApp.getPrimaryStage());
            alert.setTitle("Invalid Fields");
            alert.setHeaderText("Please fill out all red fields.");
            alert.setContentText(null);
            alert.showAndWait();
		}
		return temp;
	}
	
	public MainApp getMainApp() {
		return mainApp;
	}

	public void setMainApp(MainApp mainApp) {
		this.mainApp = mainApp;
	}

	public boolean isInitialized() {
		return initialized;
	}

	public void setInitialized(boolean initialized) {
		this.initialized = initialized;
	}
}
